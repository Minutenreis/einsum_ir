import tvm
import tvm.auto_scheduler
import tvm_helper
import argparse
##
# Note: This script was automatically generated by tvm_from_tree.py.
#
# input_string: [[[[3,6,8,9]->[8,6,9,3]],[[2,5,7,9]->[7,5,2,9]]->[7,8,5,6,2,3]],[0,4,5,6]->[0,4,7,8,2,3]],[1,4,7,8]->[0,1,2,3]
##
@tvm.auto_scheduler.register_workload
def einsum_tree( dim_0, dim_1, dim_2, dim_3, dim_4, dim_5, dim_6, dim_7, dim_8, dim_9, dtype):
  tensor_3_6_8_9 = tvm.te.placeholder((dim_3, dim_6, dim_8, dim_9), name='tensor_3_6_8_9', dtype=dtype)
  tensor_2_5_7_9 = tvm.te.placeholder((dim_2, dim_5, dim_7, dim_9), name='tensor_2_5_7_9', dtype=dtype)
  tensor_1_4_7_8 = tvm.te.placeholder((dim_1, dim_4, dim_7, dim_8), name='tensor_1_4_7_8', dtype=dtype)
  tensor_0_4_5_6 = tvm.te.placeholder((dim_0, dim_4, dim_5, dim_6), name='tensor_0_4_5_6', dtype=dtype)

  tmp_6 = tvm.te.reduce_axis((0, dim_6), name='tmp_6')
  tmp_5 = tvm.te.reduce_axis((0, dim_5), name='tmp_5')
  tmp_4 = tvm.te.reduce_axis((0, dim_4), name='tmp_4')
  tmp_8 = tvm.te.reduce_axis((0, dim_8), name='tmp_8')
  tmp_9 = tvm.te.reduce_axis((0, dim_9), name='tmp_9')
  tmp_7 = tvm.te.reduce_axis((0, dim_7), name='tmp_7')

  tensor_7_8_5_6_2_3 = tvm.te.compute( (dim_7, dim_8, dim_5, dim_6, dim_2, dim_3), lambda tmp_7, tmp_8, tmp_5, tmp_6, tmp_2, tmp_3: tvm.te.sum( tensor_3_6_8_9[ tmp_3, tmp_6, tmp_8, tmp_9 ] * tensor_2_5_7_9[ tmp_2, tmp_5, tmp_7, tmp_9 ] , axis=[ tmp_9 ]), name='tensor_7_8_5_6_2_3' )
  tensor_0_4_7_8_2_3 = tvm.te.compute( (dim_0, dim_4, dim_7, dim_8, dim_2, dim_3), lambda tmp_0, tmp_4, tmp_7, tmp_8, tmp_2, tmp_3: tvm.te.sum( tensor_7_8_5_6_2_3[ tmp_7, tmp_8, tmp_5, tmp_6, tmp_2, tmp_3 ] * tensor_0_4_5_6[ tmp_0, tmp_4, tmp_5, tmp_6 ] , axis=[ tmp_6, tmp_5 ]), name='tensor_0_4_7_8_2_3' )
  tensor_0_1_2_3 = tvm.te.compute( (dim_0, dim_1, dim_2, dim_3), lambda tmp_0, tmp_1, tmp_2, tmp_3: tvm.te.sum( tensor_0_4_7_8_2_3[ tmp_0, tmp_4, tmp_7, tmp_8, tmp_2, tmp_3 ] * tensor_1_4_7_8[ tmp_1, tmp_4, tmp_7, tmp_8 ] , axis=[ tmp_8, tmp_7, tmp_4 ]), name='tensor_0_1_2_3' )

  return [ tensor_3_6_8_9, tensor_2_5_7_9, tensor_1_4_7_8, tensor_0_4_5_6, tensor_0_1_2_3 ]

if __name__=="__main__":
  args = tvm_helper.parse_args()

  target = tvm.target.Target( tvm_helper.cpu_to_llvm( args.cpu ) )
  hardware_params = tvm.auto_scheduler.HardwareParams( target = target )
  dtype = args.dtype
  num_measure_trials = args.num_measure_trials
  timeout = args.timeout
  log_file = args.log_file

  einsum_str = "DGIJ,CFHJ,BEHI,AEFG->ABCD"
  func = einsum_tree
  sizes = (60, 60, 20, 20, 8, 8, 8, 8, 8, 8)

  tvm_helper.run_all( einsum_str,
                      func,
                      sizes,
                      dtype,
                      hardware_params,
                      target,
                      num_measure_trials,
                      timeout,
                      log_file )
